// Code generated by protoc-gen-go. DO NOT EDIT.
// source: server.proto

/*
Package proto is a generated protocol buffer package.

It is generated from these files:
	server.proto

It has these top-level messages:
	CreateRequest
	ReadRequest
	ReadOptions
	UpdateRequest
	DeleteRequest
	AggregateRequest
	Response
	Meta
*/
package proto

import proto1 "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto1.ProtoPackageIsVersion2 // please upgrade the proto package

type CreateRequest struct {
	Document  []byte `protobuf:"bytes,1,opt,name=document,proto3" json:"document,omitempty"`
	Operation string `protobuf:"bytes,2,opt,name=operation" json:"operation,omitempty"`
	Meta      *Meta  `protobuf:"bytes,3,opt,name=meta" json:"meta,omitempty"`
}

func (m *CreateRequest) Reset()                    { *m = CreateRequest{} }
func (m *CreateRequest) String() string            { return proto1.CompactTextString(m) }
func (*CreateRequest) ProtoMessage()               {}
func (*CreateRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *CreateRequest) GetDocument() []byte {
	if m != nil {
		return m.Document
	}
	return nil
}

func (m *CreateRequest) GetOperation() string {
	if m != nil {
		return m.Operation
	}
	return ""
}

func (m *CreateRequest) GetMeta() *Meta {
	if m != nil {
		return m.Meta
	}
	return nil
}

type ReadRequest struct {
	Find      []byte       `protobuf:"bytes,1,opt,name=find,proto3" json:"find,omitempty"`
	Operation string       `protobuf:"bytes,2,opt,name=operation" json:"operation,omitempty"`
	Options   *ReadOptions `protobuf:"bytes,3,opt,name=options" json:"options,omitempty"`
	Meta      *Meta        `protobuf:"bytes,4,opt,name=meta" json:"meta,omitempty"`
}

func (m *ReadRequest) Reset()                    { *m = ReadRequest{} }
func (m *ReadRequest) String() string            { return proto1.CompactTextString(m) }
func (*ReadRequest) ProtoMessage()               {}
func (*ReadRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *ReadRequest) GetFind() []byte {
	if m != nil {
		return m.Find
	}
	return nil
}

func (m *ReadRequest) GetOperation() string {
	if m != nil {
		return m.Operation
	}
	return ""
}

func (m *ReadRequest) GetOptions() *ReadOptions {
	if m != nil {
		return m.Options
	}
	return nil
}

func (m *ReadRequest) GetMeta() *Meta {
	if m != nil {
		return m.Meta
	}
	return nil
}

type ReadOptions struct {
	Select   map[string]int32 `protobuf:"bytes,1,rep,name=select" json:"select,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	Sort     map[string]int32 `protobuf:"bytes,2,rep,name=sort" json:"sort,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	Skip     int64            `protobuf:"varint,3,opt,name=skip" json:"skip,omitempty"`
	Limit    int64            `protobuf:"varint,4,opt,name=limit" json:"limit,omitempty"`
	Distinct string           `protobuf:"bytes,5,opt,name=distinct" json:"distinct,omitempty"`
}

func (m *ReadOptions) Reset()                    { *m = ReadOptions{} }
func (m *ReadOptions) String() string            { return proto1.CompactTextString(m) }
func (*ReadOptions) ProtoMessage()               {}
func (*ReadOptions) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *ReadOptions) GetSelect() map[string]int32 {
	if m != nil {
		return m.Select
	}
	return nil
}

func (m *ReadOptions) GetSort() map[string]int32 {
	if m != nil {
		return m.Sort
	}
	return nil
}

func (m *ReadOptions) GetSkip() int64 {
	if m != nil {
		return m.Skip
	}
	return 0
}

func (m *ReadOptions) GetLimit() int64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *ReadOptions) GetDistinct() string {
	if m != nil {
		return m.Distinct
	}
	return ""
}

type UpdateRequest struct {
	Find      []byte `protobuf:"bytes,1,opt,name=find,proto3" json:"find,omitempty"`
	Operation string `protobuf:"bytes,2,opt,name=operation" json:"operation,omitempty"`
	Update    []byte `protobuf:"bytes,3,opt,name=update,proto3" json:"update,omitempty"`
	Meta      *Meta  `protobuf:"bytes,4,opt,name=meta" json:"meta,omitempty"`
}

func (m *UpdateRequest) Reset()                    { *m = UpdateRequest{} }
func (m *UpdateRequest) String() string            { return proto1.CompactTextString(m) }
func (*UpdateRequest) ProtoMessage()               {}
func (*UpdateRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *UpdateRequest) GetFind() []byte {
	if m != nil {
		return m.Find
	}
	return nil
}

func (m *UpdateRequest) GetOperation() string {
	if m != nil {
		return m.Operation
	}
	return ""
}

func (m *UpdateRequest) GetUpdate() []byte {
	if m != nil {
		return m.Update
	}
	return nil
}

func (m *UpdateRequest) GetMeta() *Meta {
	if m != nil {
		return m.Meta
	}
	return nil
}

type DeleteRequest struct {
	Find      []byte `protobuf:"bytes,1,opt,name=find,proto3" json:"find,omitempty"`
	Operation string `protobuf:"bytes,2,opt,name=operation" json:"operation,omitempty"`
	Meta      *Meta  `protobuf:"bytes,3,opt,name=meta" json:"meta,omitempty"`
}

func (m *DeleteRequest) Reset()                    { *m = DeleteRequest{} }
func (m *DeleteRequest) String() string            { return proto1.CompactTextString(m) }
func (*DeleteRequest) ProtoMessage()               {}
func (*DeleteRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *DeleteRequest) GetFind() []byte {
	if m != nil {
		return m.Find
	}
	return nil
}

func (m *DeleteRequest) GetOperation() string {
	if m != nil {
		return m.Operation
	}
	return ""
}

func (m *DeleteRequest) GetMeta() *Meta {
	if m != nil {
		return m.Meta
	}
	return nil
}

type AggregateRequest struct {
	Pipeline  []byte `protobuf:"bytes,1,opt,name=pipeline,proto3" json:"pipeline,omitempty"`
	Operation string `protobuf:"bytes,2,opt,name=operation" json:"operation,omitempty"`
	Meta      *Meta  `protobuf:"bytes,3,opt,name=meta" json:"meta,omitempty"`
}

func (m *AggregateRequest) Reset()                    { *m = AggregateRequest{} }
func (m *AggregateRequest) String() string            { return proto1.CompactTextString(m) }
func (*AggregateRequest) ProtoMessage()               {}
func (*AggregateRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *AggregateRequest) GetPipeline() []byte {
	if m != nil {
		return m.Pipeline
	}
	return nil
}

func (m *AggregateRequest) GetOperation() string {
	if m != nil {
		return m.Operation
	}
	return ""
}

func (m *AggregateRequest) GetMeta() *Meta {
	if m != nil {
		return m.Meta
	}
	return nil
}

type Response struct {
	Status int32  `protobuf:"varint,1,opt,name=status" json:"status,omitempty"`
	Error  string `protobuf:"bytes,2,opt,name=error" json:"error,omitempty"`
	Result []byte `protobuf:"bytes,3,opt,name=result,proto3" json:"result,omitempty"`
}

func (m *Response) Reset()                    { *m = Response{} }
func (m *Response) String() string            { return proto1.CompactTextString(m) }
func (*Response) ProtoMessage()               {}
func (*Response) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *Response) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *Response) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

func (m *Response) GetResult() []byte {
	if m != nil {
		return m.Result
	}
	return nil
}

type Meta struct {
	Project string `protobuf:"bytes,1,opt,name=project" json:"project,omitempty"`
	DbType  string `protobuf:"bytes,2,opt,name=dbType" json:"dbType,omitempty"`
	Col     string `protobuf:"bytes,3,opt,name=col" json:"col,omitempty"`
	Token   string `protobuf:"bytes,4,opt,name=token" json:"token,omitempty"`
}

func (m *Meta) Reset()                    { *m = Meta{} }
func (m *Meta) String() string            { return proto1.CompactTextString(m) }
func (*Meta) ProtoMessage()               {}
func (*Meta) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *Meta) GetProject() string {
	if m != nil {
		return m.Project
	}
	return ""
}

func (m *Meta) GetDbType() string {
	if m != nil {
		return m.DbType
	}
	return ""
}

func (m *Meta) GetCol() string {
	if m != nil {
		return m.Col
	}
	return ""
}

func (m *Meta) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func init() {
	proto1.RegisterType((*CreateRequest)(nil), "proto.CreateRequest")
	proto1.RegisterType((*ReadRequest)(nil), "proto.ReadRequest")
	proto1.RegisterType((*ReadOptions)(nil), "proto.ReadOptions")
	proto1.RegisterType((*UpdateRequest)(nil), "proto.UpdateRequest")
	proto1.RegisterType((*DeleteRequest)(nil), "proto.DeleteRequest")
	proto1.RegisterType((*AggregateRequest)(nil), "proto.AggregateRequest")
	proto1.RegisterType((*Response)(nil), "proto.Response")
	proto1.RegisterType((*Meta)(nil), "proto.Meta")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for SpaceCloud service

type SpaceCloudClient interface {
	Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*Response, error)
	Read(ctx context.Context, in *ReadRequest, opts ...grpc.CallOption) (*Response, error)
	Update(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*Response, error)
	Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*Response, error)
	Aggregate(ctx context.Context, in *AggregateRequest, opts ...grpc.CallOption) (*Response, error)
}

type spaceCloudClient struct {
	cc *grpc.ClientConn
}

func NewSpaceCloudClient(cc *grpc.ClientConn) SpaceCloudClient {
	return &spaceCloudClient{cc}
}

func (c *spaceCloudClient) Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/proto.SpaceCloud/Create", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spaceCloudClient) Read(ctx context.Context, in *ReadRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/proto.SpaceCloud/Read", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spaceCloudClient) Update(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/proto.SpaceCloud/Update", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spaceCloudClient) Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/proto.SpaceCloud/Delete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spaceCloudClient) Aggregate(ctx context.Context, in *AggregateRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/proto.SpaceCloud/Aggregate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for SpaceCloud service

type SpaceCloudServer interface {
	Create(context.Context, *CreateRequest) (*Response, error)
	Read(context.Context, *ReadRequest) (*Response, error)
	Update(context.Context, *UpdateRequest) (*Response, error)
	Delete(context.Context, *DeleteRequest) (*Response, error)
	Aggregate(context.Context, *AggregateRequest) (*Response, error)
}

func RegisterSpaceCloudServer(s *grpc.Server, srv SpaceCloudServer) {
	s.RegisterService(&_SpaceCloud_serviceDesc, srv)
}

func _SpaceCloud_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpaceCloudServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.SpaceCloud/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpaceCloudServer).Create(ctx, req.(*CreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SpaceCloud_Read_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpaceCloudServer).Read(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.SpaceCloud/Read",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpaceCloudServer).Read(ctx, req.(*ReadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SpaceCloud_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpaceCloudServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.SpaceCloud/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpaceCloudServer).Update(ctx, req.(*UpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SpaceCloud_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpaceCloudServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.SpaceCloud/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpaceCloudServer).Delete(ctx, req.(*DeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SpaceCloud_Aggregate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AggregateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpaceCloudServer).Aggregate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.SpaceCloud/Aggregate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpaceCloudServer).Aggregate(ctx, req.(*AggregateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _SpaceCloud_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.SpaceCloud",
	HandlerType: (*SpaceCloudServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _SpaceCloud_Create_Handler,
		},
		{
			MethodName: "Read",
			Handler:    _SpaceCloud_Read_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _SpaceCloud_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _SpaceCloud_Delete_Handler,
		},
		{
			MethodName: "Aggregate",
			Handler:    _SpaceCloud_Aggregate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "server.proto",
}

func init() { proto1.RegisterFile("server.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 530 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x54, 0xcd, 0x6e, 0xd3, 0x40,
	0x10, 0xc6, 0xf1, 0x4f, 0xeb, 0x71, 0x23, 0xaa, 0x55, 0x05, 0x56, 0x54, 0x41, 0xe4, 0x53, 0x0e,
	0x10, 0xd1, 0x20, 0x51, 0xe0, 0x86, 0x0a, 0x47, 0x04, 0xda, 0xc2, 0x1d, 0xc7, 0x1e, 0x22, 0x37,
	0x8e, 0x77, 0xd9, 0x5d, 0x57, 0x0a, 0xef, 0x00, 0xef, 0xc2, 0x1b, 0xa2, 0xfd, 0xb1, 0x49, 0x20,
	0x25, 0xaa, 0x7a, 0xca, 0x7c, 0xd9, 0xf9, 0xe6, 0x9b, 0x5f, 0xc3, 0x91, 0x44, 0x71, 0x8d, 0x62,
	0xca, 0x05, 0x53, 0x8c, 0x84, 0xe6, 0x27, 0xbb, 0x82, 0xe1, 0x85, 0xc0, 0x5c, 0x21, 0xc5, 0x6f,
	0x2d, 0x4a, 0x45, 0x46, 0x70, 0x58, 0xb2, 0xa2, 0x5d, 0x61, 0xa3, 0x52, 0x6f, 0xec, 0x4d, 0x8e,
	0x68, 0x8f, 0xc9, 0x29, 0xc4, 0x8c, 0xa3, 0xc8, 0x55, 0xc5, 0x9a, 0x74, 0x30, 0xf6, 0x26, 0x31,
	0xfd, 0xf3, 0x07, 0x79, 0x0c, 0xc1, 0x0a, 0x55, 0x9e, 0xfa, 0x63, 0x6f, 0x92, 0xcc, 0x12, 0xab,
	0x33, 0x7d, 0x8f, 0x2a, 0xa7, 0xe6, 0x21, 0xfb, 0xe9, 0x41, 0x42, 0x31, 0x2f, 0x3b, 0x29, 0x02,
	0xc1, 0xd7, 0xaa, 0x29, 0x9d, 0x8c, 0xb1, 0xf7, 0x48, 0x3c, 0x81, 0x03, 0xc6, 0xb5, 0x25, 0x9d,
	0x0a, 0x71, 0x2a, 0x3a, 0xec, 0x07, 0xfb, 0x42, 0x3b, 0x97, 0x3e, 0xa1, 0xe0, 0xa6, 0x84, 0x7e,
	0x0d, 0x6c, 0x42, 0x8e, 0x49, 0x5e, 0x40, 0x24, 0xb1, 0xc6, 0x42, 0x57, 0xee, 0x4f, 0x92, 0xd9,
	0xa3, 0x7f, 0xa3, 0x4f, 0x2f, 0x8d, 0xc3, 0xbb, 0x46, 0x89, 0x35, 0x75, 0xde, 0xe4, 0x19, 0x04,
	0x92, 0x09, 0x95, 0x0e, 0x0c, 0xeb, 0x74, 0x17, 0x8b, 0x09, 0xc7, 0x31, 0x9e, 0xba, 0x74, 0xb9,
	0xac, 0xb8, 0xa9, 0xc2, 0xa7, 0xc6, 0x26, 0x27, 0x10, 0xd6, 0xd5, 0xaa, 0x52, 0x26, 0x5f, 0x9f,
	0x5a, 0x60, 0xe6, 0x51, 0x49, 0x55, 0x35, 0x85, 0x4a, 0x43, 0xd3, 0x8f, 0x1e, 0x8f, 0x5e, 0x41,
	0xb2, 0x91, 0x0e, 0x39, 0x06, 0x7f, 0x89, 0x6b, 0xd3, 0xce, 0x98, 0x6a, 0x53, 0x87, 0xbc, 0xce,
	0xeb, 0x16, 0x4d, 0x27, 0x43, 0x6a, 0xc1, 0xeb, 0xc1, 0x4b, 0x6f, 0x74, 0x0e, 0x71, 0x9f, 0xd3,
	0x6d, 0x88, 0xd9, 0x77, 0x18, 0x7e, 0xe6, 0xe5, 0xc6, 0xc2, 0xdc, 0x7e, 0x8a, 0x0f, 0x20, 0x6a,
	0x4d, 0x08, 0x53, 0xfe, 0x11, 0x75, 0x68, 0xff, 0xbc, 0xe6, 0x30, 0x7c, 0x8b, 0x35, 0xde, 0x45,
	0x7b, 0xef, 0x92, 0xae, 0xe0, 0xf8, 0xcd, 0x62, 0x21, 0x70, 0xb1, 0x7d, 0x13, 0xbc, 0xe2, 0x58,
	0x57, 0x0d, 0x76, 0x37, 0xd1, 0xe1, 0xbb, 0xca, 0x7d, 0x84, 0x43, 0x8a, 0x92, 0xb3, 0x46, 0xa2,
	0xee, 0x8b, 0x54, 0xb9, 0x6a, 0xa5, 0x11, 0x09, 0xa9, 0x43, 0x7a, 0x18, 0x28, 0x04, 0x13, 0x2e,
	0xbc, 0x05, 0xda, 0x5b, 0xa0, 0x6c, 0x6b, 0xd5, 0x75, 0xd1, 0xa2, 0xec, 0x0b, 0x04, 0x3a, 0x3e,
	0x49, 0xe1, 0x80, 0x0b, 0x76, 0x65, 0xb7, 0x59, 0xf3, 0x3a, 0xa8, 0x99, 0xe5, 0xfc, 0xd3, 0x9a,
	0xa3, 0x0b, 0xe8, 0x90, 0x5e, 0x83, 0x82, 0xd5, 0x26, 0x5c, 0x4c, 0xb5, 0xa9, 0x95, 0x15, 0x5b,
	0x62, 0x63, 0x46, 0x12, 0x53, 0x0b, 0x66, 0x3f, 0x06, 0x00, 0x97, 0x3c, 0x2f, 0xf0, 0xa2, 0x66,
	0x6d, 0x49, 0xce, 0x20, 0xb2, 0x9f, 0x10, 0x72, 0xe2, 0xea, 0xdb, 0xfa, 0xa2, 0x8c, 0xee, 0xf7,
	0xf7, 0x60, 0xeb, 0xcc, 0xee, 0x91, 0xa7, 0x10, 0xe8, 0xeb, 0x20, 0x9b, 0xe7, 0xfb, 0x1f, 0xf7,
	0x33, 0x88, 0xec, 0xce, 0xf5, 0x0a, 0x5b, 0x2b, 0x78, 0x03, 0xc5, 0xae, 0x4a, 0x4f, 0xd9, 0xda,
	0x9c, 0x5d, 0x94, 0x73, 0x88, 0xfb, 0xc9, 0x93, 0x87, 0xee, 0xfd, 0xef, 0x5d, 0xd8, 0x41, 0x9c,
	0x47, 0xe6, 0x9f, 0xe7, 0xbf, 0x03, 0x00, 0x00, 0xff, 0xff, 0xda, 0x0f, 0xdc, 0x63, 0x61, 0x05,
	0x00, 0x00,
}
